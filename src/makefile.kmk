#
# Universal port driver
# kBuild makefile
# Copyright (C) netlabs.org 2003-2009
# See COPYING for license informations
#
# please define (as env variables or kmk command line) the following variables before starting:
# BUILD_PLATFORM = os2
# BUILD_TYPE = release|debug
#
# Copy Config.km_ to Config.kmk and edit it to match your installation.
#

DEPTH = ..

TOOL = GCC3OMF

DLLS = uni

# required to get IPFC compiler to work correctly
export IPFC=$(TOOLKIT)\IPFC

uni_RCTOOL =OPENWATCOM
TOOL_OPENWATCOM_RCFLAGS += -i=$(TOOLKIT)/h

uni_main_SOURCES = \
	uni.def \
	uni.c

# english source
uni_INST = bin/en/
uni_SOURCES = $(uni_main_SOURCES) en/uni.rc

# german source
DLLS += uni_de
uni_de_EXTENDS = uni
uni_de_NAME = uni
uni_de_INST = bin/de/
uni_de_SOURCES = $(uni_main_SOURCES) de/uni.rc
uni_de_CLEAN = $(PATH_BIN)/de/uni.pdr

uni_CFLAGS = -Zomf
uni_CFLAGS.release = -s -O3 -march=pentium -mtune=pentium4
uni_CFLAGS.debug = -g -O0 -DDEBUG
uni_LDFLAGS = -Zomf -Zno-fork -Zmap -Zbin-files  
uni_LDFLAGS.release = -s
uni_LDFLAGS.debug = -g

uni_DEFS =
uni_INCS = ./h 

uni_DLLSUFF = .pdr

uni_CLEAN = description.rc $(PATH_BIN)/uni.pdr

#build other files en (e.g. help)
OTHERS = /en/uni.ipf $(PATH_BIN)/en/uni.hlp $(PATH_BIN)/en/readme.txt
OTHER_CLEAN = $(PATH_BIN)/en/uni.hlp $(PATH_BIN)/en/readme.txt

#build other files de (e.g. help)
OTHERS += /de/uni.ipf $(PATH_BIN)/de/uni.hlp $(PATH_BIN)/de/readme.txt
OTHER_CLEAN += $(PATH_BIN)/de/uni.hlp $(PATH_BIN)/de/readme.txt


#install some more files
INSTALLS = docs
docs_INST = bin/
docs_SOURCES = uni.ico
OTHER_CLEAN += $(PATH_BIN)/uni.ico

# packaging stuffs
ifeq ($(BUILD_TYPE),debug)
  PACKAGE_NAME = uni-$(subst .,_,$(VERSION))-$(BUILD)-debug.zip
else
  PACKAGE_NAME = uni-$(subst .,_,$(VERSION))-$(BUILD).zip
endif
PACKING += $(PATH_ROOT)/dist/$(PACKAGE_NAME)
OTHER_CLEAN += $(PATH_ROOT)/dist/$(PACKAGE_NAME)

# now include standard code
include $(PATH_KBUILD)/rules.kMk

# here follows standard gnu make inference rules

# add new dependancy on build level info
en/uni.rc : description.rc
de/uni.rc : description.rc

# update bldlevel info
description.rc: config.kmk
	@echo Writing build level informations
	@cp description.rc_ description.rc
	@BldLevelInf0.cmd $(VERSION) $(BUILD)

# substitute macros in ipf file en
/en/uni.ipf: Config.kmk ./en/uni.ipf
	$(QUIET)$(SED) "s;_VERSION_;$(VERSION);g" ./en/uni.ipf \
		| $(SED) "s;_BUILD_;$(BUILD);g" \
		> uni_en.ipf

# substitute macros in ipf file de
/de/uni.ipf: Config.kmk ./de/uni.ipf
	$(QUIET)$(SED) "s;_VERSION_;$(VERSION);g" ./de/uni.ipf \
		| $(SED) "s;_BUILD_;$(BUILD);g" \
		> uni_de.ipf

# compile english help file
$(PATH_BIN)/en/uni.hlp: en/uni.ipf ./uni.h config.kmk
	-gcc -E -I./h -I./en -x c uni_en.ipf > uni_en.i
	-@mkdir $(PATH_BIN)
	-@mkdir $(PATH_BIN)/en
	$(TOOLKIT)\bin\ipfc.exe uni_en.i $(PATH_BIN)/en/uni.hlp /COUNTRY=001 /CODEPAGE=850
	rm uni_en.i
	rm uni_en.ipf

# compile german help file
$(PATH_BIN)/de/uni.hlp: de/uni.ipf ./uni.h config.kmk
	-gcc -E -I./h -I./de -x c uni_de.ipf > uni_de.i
	-@mkdir $(PATH_BIN)
	-@mkdir $(PATH_BIN)/de
	$(TOOLKIT)\bin\ipfc.exe uni_de.i $(PATH_BIN)/de/uni.hlp /COUNTRY=001 /CODEPAGE=850
	rm uni_de.i
	rm uni_de.ipf

# substitute macros in docs en
$(PATH_BIN)/en/readme.txt: Config.kmk en/readme.txt
	$(QUIET)$(SED) "s;_VERSION_;$(VERSION);g" en/readme.txt \
		| $(SED) "s;_BUILD_;$(BUILD);g" \
		> $(PATH_BIN)/en/readme.txt

# substitute macros in docs de
$(PATH_BIN)/de/readme.txt: Config.kmk de/readme.txt
	$(QUIET)$(SED) "s;_VERSION_;$(VERSION);g" de/readme.txt \
		| $(SED) "s;_BUILD_;$(BUILD);g" \
		> $(PATH_BIN)/de/readme.txt


# final: zip all files!
$(PATH_ROOT)/dist/$(PACKAGE_NAME): \
		$(PATH_BIN)/uni.pdr
	$(QUIET)$(MKDIR) -p $(PATH_ROOT)/dist                              
	$(QUIET)$(RM) -f $@
	-ea2.cmd -e DEFAULT_PORT=UNI $(PATH_BIN)/en/uni.pdr
	-ea2.cmd -e DEFAULT_PORT=UNI $(PATH_BIN)/de/uni.pdr
	zip -9 -r $@ $(PATH_BIN)/*


